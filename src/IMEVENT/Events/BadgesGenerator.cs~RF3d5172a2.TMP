using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using IMEVENT.Data;

namespace IMEVENT.Badges
{
    public class BadgesGenerator
    {        
        private int totalAttendees;
        public int TotalAttendees
        {
            get { return totalAttendees; }

            set
            {
                totalAttendees = (value < 0) ? 0 : value;
            }
        }        

        //Inputs
        List<Hall> availableSeatsInHall;
        List<Dormitory> availableBedsInDorms;
        List<Refectory> availableTablesInRefs;

        //Outputs
        Dictionary<int, HallMappingEntry> AttendeeToSeats;
        Dictionary<int, DormMappingEntry> AttendeeToBeds;
        Dictionary<int, RefectoryMappingEntry> AttendeeToTables;

        #region Map Attendees to Seat in Halls
        Dictionary<int, Helpers.Section> ListofSeats = new Dictionary<int, Helpers.Section>();
        
        public bool MapAttendeeToSeat()
        {
            try
            {
                int index = 0;
                foreach (Hall seat in availableSeatsInHall)
                {
                    for (int j = 1; j <= seat.Capacity; j++)
                    {
                        index++;
                        ListofSeats[index] = new Helpers.Section
                        {
                            Id = seat.IdHall,
                            SeatNbr = j
                        };
                    }
                }

                //Shuffle Ids
                List<int> SeatsIds = new List<int>(ListofSeats.Keys);
                Helpers.Shuffle.ShuffleList(SeatsIds);

                //do the assignement
                AttendeeToSeats = new Dictionary<int, HallMappingEntry>();
                for (int i = 0; i < SeatsIds.Count; ++i)
                {
                    index = SeatsIds[i];
                    AttendeeToSeats[index] = new HallMappingEntry
                    {
                        AttendeeIndex = index,
                        HallId = ListofSeats[index].Id,
                        SeatNbr = ListofSeats[index].SeatNbr
                    };
                }

                return true;
            }
            catch
            {
                return false;
            }           
        }

        #endregion

        #region Map Attendees to Beds in Dorms
        Dictionary<int, Helpers.Section> ListofBeds = new Dictionary<int, Helpers.Section>();

        public bool MapAttendeeToBeds()
        {
            try
            {
                int index = 0;
                foreach (var seat in availableSeats)
                {
                    for (int j = 1; j <= seat.Capacity; j++)
                    {
                        index++;
                        ListofBeds[index] = new Helpers.Section
                        {
                            Id = seat.IdHall,
                            SeatNbr = j
                        };
                    }
                }

                //Shuffle Ids
                List<int> SeatsIds = new List<int>(ListofSeats.Keys);
                Helpers.Shuffle.ShuffleList(SeatsIds);

                //do the assignement
                AttendeeToSeats = new Dictionary<int, HallMappingEntry>();
                for (int i = 0; i < SeatsIds.Count; ++i)
                {
                    index = SeatsIds[i];
                    AttendeeToSeats[index] = new HallMappingEntry
                    {
                        AttendeeIndex = index,
                        HallId = ListofBeds[index].Id,
                        SeatNbr = ListofBeds[index].SeatNbr
                    };
                }

                return true;
            }
            catch
            {
                return false;
            }
        }

        #endregion
    }
}
